# setup graph settings
dat_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "1", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# Code4.5
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "1", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# Code4.5
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
print("ok")
# plot
plot(dat_FFT / max(dat_FFT), type = "1", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
print("ok2")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# Code4.5
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "1", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# Code4.5
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "l", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.5
Sys.setlocale("LC_CTYPE","C")
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "l", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.5
Sys.setlocale("LC_CTYPE","C")
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "l", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.5
# Sys.setlocale("LC_CTYPE","C")
Sys.setlocale("LC_MESSAGES",'en_US')
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "l", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.5
# Sys.setlocale("LC_CTYPE","C")
Sys.setlocale("LC_MESSAGES",'en_US')
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "l", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.5
# Sys.setlocale("LC_CTYPE","C")
# Sys.setlocale("LC_MESSAGES",'en_US')
Sys.setenv(LANGUAGE="en")
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT / max(dat_FFT), type = "l", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.5
# Sys.setlocale("LC_CTYPE","C")
# Sys.setlocale("LC_MESSAGES",'en_US')
Sys.setenv(LANGUAGE="en")
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT/max(dat_FFT), type = "l", main = main,
y_lab = "|normalized freq spectrum|", ylim = c(0, y_max),
x_lab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.5
# Sys.setlocale("LC_CTYPE","C")
# Sys.setlocale("LC_MESSAGES",'en_US')
Sys.setenv(LANGUAGE="en")
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT/max(dat_FFT), type = "l", main = main,
ylab = "|normalized freq spectrum|", ylim = c(0, y_max),
xlab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
fft(Nile)
z = fft(Nile)
plot(z)
z = fft(Nile)
z = fft(Nile)
z
z = fft(Nile)
z.size
z = fft(Nile)
z.size()
z = fft(Nile)
z.shape()
z = fft(Nile)
typeof(z)
z = fft(Nile)
z
z = fft(Nile)
len(z)
z = fft(Nile)
size(as.vector(z))
z = fft(Nile)
as.vector(z)
z = fft(Nile)
abs(z)
# Code4.5
# Sys.setlocale("LC_CTYPE","C")
# Sys.setlocale("LC_MESSAGES",'en_US')
Sys.setenv(LANGUAGE="en")
# function to plot frequency spectrum
plot.spectrum <- function(dat, lab = "", main = "", y_max = 1, tick = c(8, 4), unit = 1)
{
# transform inputs into the frequency space
dat_FFT <- abs(fft(as.vector(dat)))
# setup graph settings
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
# plot
plot(dat_FFT/max(dat_FFT), type = "l", main = main,
ylab = "|normalized freq spectrum|", ylim = c(0, y_max),
xlab = sprintf("frequency[1/%s]", lab), xlim = c(1, data_len / 2), xaxt = "n")
axis(side = 1, at = data_len / freq_tick * unit + 1, labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
# (a) Annual flow of Nile
plot.spectrum(Nile, main = "(a)", lab =   "year")
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
plot.spectrum(y_CO2, main = "(b)", lab =   "month", tick = c(12, 6))
# (c) UK gas comsumption
plot.spectrum(UKgas, main = "(c)", lab =   "month", tick = c(12, 6), unit = 3)
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
plot.spectrum(y_nonlinear, main = "(d)", lab =   "time")
par(oldpar)
# Code4.6
# Holt-Winters
HW_Nile <- HoltWinters(Nile, beta = False, gamma = False)
# Code4.6
# Holt-Winters
HW_Nile <- HoltWinters(Nile, beta = FALSE, gamma = FALSE)
print(str(HW_Nile))
# Code4.6
# Holt-Winters
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
mygray <- "#80808080"
# (a) Annual flow of Nile
HW_Nile <- HoltWinters(Nile, beta = FALSE, gamma = FALSE)
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
HW_CO2 <- HoltWinters(y_CO2)
# (c) UK gas comsumption
HW_UKgas_log <- HoltWinters(UKgas_log)
# Code4.6
# Holt-Winters
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
mygray <- "#80808080"
# (a) Annual flow of Nile
HW_Nile <- HoltWinters(Nile, beta = FALSE, gamma = FALSE)
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
HW_CO2 <- HoltWinters(y_CO2)
# (c) UK gas comsumption
HW_UKgas_log <- HoltWinters(UKgas_log)
# Code4.6
# Holt-Winters
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
mygray <- "#80808080"
# (a) Annual flow of Nile
HW_Nile <- HoltWinters(Nile, beta = FALSE, gamma = FALSE)
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
HW_CO2 <- HoltWinters(y_CO2)
# (c) UK gas comsumption
HW_UKgas_log <- HoltWinters(log(UKgas))
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
HW_nonlinear <- HoltWinters(y_nonlinear, gamme = FALSE)
# Code4.6
# Holt-Winters
library("imputeTS")
oldpar = par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
mygray <- "#80808080"
# (a) Annual flow of Nile
HW_Nile <- HoltWinters(Nile, beta = FALSE, gamma = FALSE)
# (b) CO2
Ryori = read.csv("../tsbook-master/CO2.csv")
y_all = ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y = window(y_all, end = c(2014, 12))
y_CO2 = y
y_CO2 = na.interpolation(y_CO2, option="linear")
HW_CO2 <- HoltWinters(y_CO2)
# (c) UK gas comsumption
HW_UKgas_log <- HoltWinters(log(UKgas))
# (d) artificial data generated by non-linear model
load("../tsbook-master/BenchmarkNonLinearModel.RData")
y_nonlinear = ts(y)
HW_nonlinear <- HoltWinters(y_nonlinear, gamma = FALSE)
plot(HW_Nile, main = "(a)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
plot(HW_CO2, main = "(a)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
plot(HW_UKgas_log, main = "(a)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
plot(HW_nonlinear, main = "(a)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
par(oldpar)
